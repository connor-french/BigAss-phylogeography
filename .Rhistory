select(-cells)) %>%
set_names()
create_poly <- function(resolution){
rast <- raster(get(paste0("template_", resolution)))
vals <- rep(NA, ncell(rast))
sumstats <- get(paste0("sumstats_", resolution))
explanatory <- get(paste0("explanatory_", resolution))
vals[sumstats$cells] <- sumstats$avg_pi
rast <- setValues(rast, values = vals)
rast_poly <- rasterToPolygons(rast) %>%
st_as_sf() %>%
rename(avg_pi = layer) %>%
bind_cols(sumstats %>% select(-avg_pi),
explanatory)
}
write_legends <- function(sumstat, resolution) {
filename <-
here("output",
"legends",
paste0(sumstat, "_", resolution, ".png"))
if (!file.exists(filename)) {
sumstat_poly <- create_poly(resolution)
sumstat_leg <- ggplot() +
geom_sf(data = sumstat_poly, aes(fill = .data[[sumstat]]), size = 0.1) +
scale_fill_gradientn(colors = pal, name = sumstat) +
theme(legend.background = element_rect(fill = alpha("white", 0.5)))
sumstat_leg <- sumstat_leg %>%
cowplot::get_legend()
ggsave(
sumstat_leg,
filename = filename,
width = 2,
height = 3,
bg = "transparent"
)
}
}
resolutions <- c(100, 200, 300)
sumstat_poly <- vector(mode = "list", length = 3)
names(sumstat_poly) <- c("res_100", "res_200", "res_300")
for (res in seq_along(resolutions)) {
map(sumstats, ~write_legends(.x, resolution = resolutions[res]))
sumstat_poly[[res]] <- create_poly(resolutions[res])
}
sumstats
sumstats_100
sumstats_200
sumstats_300
spread_path <- here("output", "spreadsheets")
sumstats_100 <- read_csv(file.path("output", "spreadsheets", "sumstats_100.csv")) %>%
mutate(log_num_otus = log10(richness),
sqrt_pi = sqrt(avg_pi)) %>%
select(
cells,
log_num_otus,
num_otus = richness,
avg_pi,
sqrt_pi,
sd_pi,
var_pi,
hill_1 = hill_1_c,
hill_2 = hill_2_c,
hill_3 = hill_3_c,
hill_4 = hill_4_c,
hill_5 = hill_5_c
)
sumstats_200 <- read_csv(file.path(spread_path, "sumstats_200.csv")) %>%
mutate(log_num_otus = log10(richness),
sqrt_pi = sqrt(avg_pi)) %>%
select(
cells,
log_num_otus,
num_otus = richness,
avg_pi,
sqrt_pi,
sd_pi,
var_pi,
hill_1 = hill_1_c,
hill_2 = hill_2_c,
hill_3 = hill_3_c,
hill_4 = hill_4_c,
hill_5 = hill_5_c
)
sumstats_300 <- read_csv(file.path(spread_path, "sumstats_300.csv")) %>%
mutate(log_num_otus = log10(richness),
sqrt_pi = sqrt(avg_pi)) %>%
select(
cells,
log_num_otus,
num_otus = richness,
avg_pi,
sqrt_pi,
sd_pi,
var_pi,
hill_1 = hill_1_c,
hill_2 = hill_2_c,
hill_3 = hill_3_c,
hill_4 = hill_4_c,
hill_5 = hill_5_c
)
template_100 <-
stack(here("data", "climate", "rasters_100km", "chelsa_100km.tif"))
template_200 <-
stack(here("data", "climate", "rasters_200km", "chelsa_200km.tif"))
template_300 <-
stack(here("data", "climate", "rasters_300km", "chelsa_300km.tif"))
world_basemap <-
ne_coastline(scale = "small", returnclass = "sf") %>%
st_transform(crs(template_100)) %>%
st_simplify()
pal <- wes_palette("Zissou1", 100, type = "continuous")
sumstats <- colnames(sumstats_100 %>%
select(-cells)) %>%
set_names()
resolutions <- c(100, 200, 300)
sumstat_poly <- vector(mode = "list", length = 3)
names(sumstat_poly) <- c("res_100", "res_200", "res_300")
for (res in seq_along(resolutions)) {
map(sumstats, ~write_legends(.x, resolution = resolutions[res]))
sumstat_poly[[res]] <- create_poly(resolutions[res])
}
shinyApp(
ui = fluidPage(
fluidRow(
column(3,
selectInput("resolution", "Spatial Resolution",
choices = resolutions)
),
column(3,
selectInput("sumstat", "Summary Statistic",
choices = sumstats)
),
column(3,
selectInput("explanatory", "Explanatory Variable",
choices = explanatory_vars)
)
),
fluidRow(
column(plotlyOutput("sumstat_plot", inline = TRUE), width = 10)
),
fluidRow(
column(plotOutput("scatterplot"), width = 7),
column(gt_output("lm_table"), width = 4)
)
),
server = function(input, output) {
ss_poly <- reactive(df <-
sumstat_poly[[paste0("res_", input$resolution)]])
ss_lm <- reactive({
lm(reformulate(input$sumstat, input$explanatory), data = ss_poly())
})
basemap <- reactive({
ggplot() +
geom_sf(data = world_basemap,
fill = "transparent",
show.legend = FALSE)
})
output$sumstat_plot <- renderPlotly({
ggplotly(
basemap() +
geom_sf(
data = ss_poly(),
aes_string(fill = input$sumstat),
size = 0.1
) +
scale_fill_gradientn(colors = pal, guide = NULL) +
labs(title = paste0("Map of ", input$sumstat)) +
ggthemes::theme_map()
) %>%
layout(
images = list(
source = base64enc::dataURI(file = here(
"output", "legends", paste0(input$sumstat, "_100", ".png")
)),
x = 0,
y = 0,
sizex = 0.75,
sizey = 0.75,
xref = "paper",
yref = "paper",
xanchor = "left",
yanchor = "bottom"
),
margin = list(t = 50)
)
})
output$scatterplot <- renderPlot({
ggplot(data = ss_poly(), aes_string(x = input$explanatory, y = input$sumstat)) +
geom_point() +
geom_smooth(method = "lm") +
theme_minimal()
})
output$lm_table <- render_gt({
lm_tidy <- ss_lm() %>%
tidy() %>%
slice(-1) %>%
select(estimate, p.value)
lm_glance <- ss_lm() %>%
glance() %>%
select(r.squared)
bind_cols(lm_tidy, lm_glance) %>%
gt() %>%
fmt_number(everything(), decimals = 3)
})
},
options = list(height = 700)
)
?reformulate
reformulate("s", "d")
shinyApp(
ui = fluidPage(
fluidRow(
column(3,
selectInput("resolution", "Spatial Resolution",
choices = resolutions)
),
column(3,
selectInput("sumstat", "Summary Statistic",
choices = sumstats)
),
column(3,
selectInput("explanatory", "Explanatory Variable",
choices = explanatory_vars)
)
),
fluidRow(
column(plotlyOutput("sumstat_plot", inline = TRUE), width = 10)
),
fluidRow(
column(plotOutput("scatterplot"), width = 7),
column(gt_output("lm_table"), width = 4)
)
),
server = function(input, output) {
ss_poly <- reactive(df <-
sumstat_poly[[paste0("res_", input$resolution)]])
ss_lm <- reactive({
lm(reformulate(input$explanatory, input$sumstat), data = ss_poly())
})
basemap <- reactive({
ggplot() +
geom_sf(data = world_basemap,
fill = "transparent",
show.legend = FALSE)
})
output$sumstat_plot <- renderPlotly({
ggplotly(
basemap() +
geom_sf(
data = ss_poly(),
aes_string(fill = input$sumstat),
size = 0.1
) +
scale_fill_gradientn(colors = pal, guide = NULL) +
labs(title = paste0("Map of ", input$sumstat)) +
ggthemes::theme_map()
) %>%
layout(
images = list(
source = base64enc::dataURI(file = here(
"output", "legends", paste0(input$sumstat, "_100", ".png")
)),
x = 0,
y = 0,
sizex = 0.75,
sizey = 0.75,
xref = "paper",
yref = "paper",
xanchor = "left",
yanchor = "bottom"
),
margin = list(t = 50)
)
})
output$scatterplot <- renderPlot({
ggplot(data = ss_poly(), aes_string(x = input$explanatory, y = input$sumstat)) +
geom_point() +
geom_smooth(method = "lm") +
theme_minimal()
})
output$lm_table <- render_gt({
lm_tidy <- ss_lm() %>%
tidy() %>%
slice(-1) %>%
select(estimate, p.value)
lm_glance <- ss_lm() %>%
glance() %>%
select(r.squared)
bind_cols(lm_tidy, lm_glance) %>%
gt() %>%
fmt_number(everything(), decimals = 3)
})
},
options = list(height = 700)
)
?raster::resample
library(ape)
f <- read.FASTA("/Users/connorfrench/Dropbox/Old_Mac/School_Stuff/CUNY/BigAss-bird-phylogeography/birds/bird-seqs-three/17.fuliginosa.nex")
f <- read.nexus("/Users/connorfrench/Dropbox/Old_Mac/School_Stuff/CUNY/BigAss-bird-phylogeography/birds/bird-seqs-three/17.fuliginosa.nex")
f <- read.FASTA("/Users/connorfrench/Desktop/ex_fasta.fas")
f$sp_1
f2 <- f[["sp_1"]]
f2
?subset
f2 <- subset(f, sp_1)
f2 <- subset(f, "sp_1")
?tribble
library(tidyverse)
?tribble
t <- tibble(seqname = "ex_fasta", seq = f)
t <- tibble(seqname = "ex_fasta", seq = list(f))
t
t$seq
t$seq[[1]]
t$seq[[1]]$sp_1
f2 <- read.FASTA("/Users/connorfrench/Desktop/ex_fasta.fas")
t <- tibble(seqname = c("ex_fasta", "ex_fasta2", seq = list(f, f2))
t <- tibble(seqname = c("ex_fasta", "ex_fasta2", seq = list(f, f2))
)
t <- tibble(seqname = c("ex_fasta", "ex_fasta2"), seq = list(f, f2))
t
t$seq
object.size(t)
t <- tibble(seqname = c("ex_fasta", "ex_fasta2"), seq = list(f, f2)) %>%
mutate(gen_dist = dist.dna(seq))
t
t <- tibble(seqname = c("ex_fasta", "ex_fasta2"), seq = list(f, f2)) %>%
mutate(gen_dist = dist.dna(seq[[1]]))
t
library(ape)
?dplyr::count
?dplyr::filter
library(sf)
quest_locs <- st_read("/Users/connorfrench/Desktop/bold_questionable.csv")
quest_locs
library(tidyverse)
quest_locs <- st_read("/Users/connorfrench/Desktop/bold_questionable.csv") %>%
mutate(longitude = str_split_fixed(geometry, "|")[1],
latitude = str_split_fixed(geometry, "|")[2])
quest_locs <- st_read("/Users/connorfrench/Desktop/bold_questionable.csv") %>%
mutate(longitude = str_split_fixed(geometry, "|", n = 2)[1],
latitude = str_split_fixed(geometry, "|", n = 2)[2])
quest_locs
quest_locs <- st_read("/Users/connorfrench/Desktop/bold_questionable.csv")
quest_locs_latlong <- quest_locs %>%
mutate(longitude = str_split_fixed(geometry, "|", n = 2)[,1],
latitude = str_split_fixed(geometry, "|", n = 2)[,2])
quest_locs_latlong
str_split_fixed(quest_locs$geometry, "|")
str_split_fixed(quest_locs$geometry, "|", n = 2)
str_split_fixed(quest_locs$geometry, "\|", n = 2)
str_split_fixed(quest_locs$geometry, "\\|", n = 2)
quest_locs_latlong <- quest_locs %>%
mutate(longitude = str_split_fixed(geometry, "\\|", n = 2)[,1],
latitude = str_split_fixed(geometry, "\\|", n = 2)[,2]))
quest_locs_latlong <- quest_locs %>%
mutate(longitude = str_split_fixed(geometry, "\\|", n = 2)[,1],
latitude = str_split_fixed(geometry, "\\|", n = 2)[,2])
quest_locs_latlong
quest_locs_latlong <- quest_locs %>%
filter(!duplicated(geometry)) %>%
mutate(longitude = str_split_fixed(geometry, "\\|", n = 2)[,1],
latitude = str_split_fixed(geometry, "\\|", n = 2)[,2])
quest_locs_latlong
nrow(quest_locs_latlong)
write_csv(quest_locs_latlong, path = "~/Desktop/quest_locs_latlong.csv")
?st_write()
?st_as_sf
?st_crs
quest_locs_sf <- st_as_sf(quest_locs_latlong,
coords = c("longitude", "latitude"),
crs = st_crs(4326))
quest_locs_sf
quest_locs_latlong
st_write(quest_locs_sf, "~/Desktop/questionable_locs.kml")
quest_locs <- st_read("/Users/connorfrench/Desktop/bold_questionable.csv")
quest_locs <- read_csv("/Users/connorfrench/Desktop/bold_questionable.csv")
quest_locs
quest_locs <- st_read("/Users/connorfrench/Desktop/bold_questionable.csv")
head(quest_locs)
quest_locs <- read_csv("/Users/connorfrench/Desktop/bold_questionable.csv")
quest_locs <- read_csv("/Users/connorfrench/Desktop/bold_questionable.csv")
quest_locs <- read_csv("/Users/connorfrench/Desktop/bold_questionable.csv")
quest_locs <- read_csv("/Users/connorfrench/Desktop/bold_questionable.csv")
?replace_na
quest_locs <- read_csv("/Users/connorfrench/Desktop/bold_questionable.csv")
quest_locs_latlong <- quest_locs %>%
filter(!duplicated(geometry)) %>%
mutate(longitude = str_split_fixed(geometry, "\\|", n = 2)[,1],
latitude = str_split_fixed(geometry, "\\|", n = 2)[,2])
quest_locs_sf <- st_as_sf(quest_locs_latlong,
coords = c("longitude", "latitude"),
crs = st_crs(4326))
st_write(quest_locs_sf, "~/Desktop/questionable_locs.kml")
?st_write
st_write(quest_locs_sf, "~/Desktop/questionable_locs.kml", overwrite = TRUE)
st_write(quest_locs_sf, "~/Desktop/questionable_locs.kml", overwrite = TRUE)
st_write(quest_locs_sf %>% filter(continents == "open_ocean"), "~/Desktop/questionable_locs_open.kml")
library(here)
library(sf)
library(rnaturalearth)
library(plotly)
library(cowplot)
library(wesanderson)
library(raster)
library(tidyverse)
library(broom)
library(gt)
library(shiny)
spread_path <- here("output", "spreadsheets")
sumstats_100 <- read_csv(file.path("output", "spreadsheets", "sumstats_100.csv")) %>%
mutate(log_num_otus = log10(richness),
sqrt_pi = sqrt(avg_pi)) %>%
select(
cells,
log_num_otus,
num_otus = richness,
avg_pi,
sqrt_pi,
sd_pi,
var_pi,
hill_1 = hill_1_c,
hill_2 = hill_2_c,
hill_3 = hill_3_c,
hill_4 = hill_4_c,
hill_5 = hill_5_c
)
library(here)
library(sf)
library(rnaturalearth)
library(plotly)
library(cowplot)
library(wesanderson)
library(raster)
library(tidyverse)
library(broom)
library(gt)
library(shiny)
spread_path <- here("output", "spreadsheets")
sumstats_100 <- read_csv(file.path("output", "spreadsheets", "sumstats_100.csv")) %>%
mutate(log_num_otus = log10(richness),
sqrt_pi = sqrt(avg_pi)) %>%
select(
cells,
log_num_otus,
num_otus = richness,
avg_pi,
sqrt_pi,
sd_pi,
var_pi,
hill_1 = hill_1_c,
hill_2 = hill_2_c,
hill_3 = hill_3_c,
hill_4 = hill_4_c,
hill_5 = hill_5_c
)
sumstats_200 <- read_csv(file.path(spread_path, "sumstats_200.csv")) %>%
mutate(log_num_otus = log10(richness),
sqrt_pi = sqrt(avg_pi)) %>%
select(
cells,
log_num_otus,
num_otus = richness,
avg_pi,
sqrt_pi,
sd_pi,
var_pi,
hill_1 = hill_1_c,
hill_2 = hill_2_c,
hill_3 = hill_3_c,
hill_4 = hill_4_c,
hill_5 = hill_5_c
)
sumstats_300 <- read_csv(file.path(spread_path, "sumstats_300.csv")) %>%
mutate(log_num_otus = log10(richness),
sqrt_pi = sqrt(avg_pi)) %>%
select(
cells,
log_num_otus,
num_otus = richness,
avg_pi,
sqrt_pi,
sd_pi,
var_pi,
hill_1 = hill_1_c,
hill_2 = hill_2_c,
hill_3 = hill_3_c,
hill_4 = hill_4_c,
hill_5 = hill_5_c
)
climate_100 <- stack(here("data", "climate", "rasters_100km", "chelsa_100km.tif"),
here("data", "climate", "rasters_100km", "pc_7_LGM_2_5min_agg_100.tif"))
ggplot() +
geom_sf(data = rnaturalearth::ne_coastline(returnclass = "sf")) +
geom_sf(quest_locs_sf)
quest_locs <- read_csv("/Users/connorfrench/Desktop/bold_questionable.csv")
quest_locs_latlong <- quest_locs %>%
filter(!duplicated(geometry)) %>%
mutate(longitude = str_split_fixed(geometry, "\\|", n = 2)[,1],
latitude = str_split_fixed(geometry, "\\|", n = 2)[,2])
quest_locs_sf <- st_as_sf(quest_locs_latlong,
coords = c("longitude", "latitude"),
crs = st_crs(4326))
ggplot() +
geom_sf(data = rnaturalearth::ne_coastline(returnclass = "sf")) +
geom_sf(data = quest_locs_sf)
install.packages("IRkernel")
IRkernel::installspec()
?median
?mapply
?purrr::pmap
?var
