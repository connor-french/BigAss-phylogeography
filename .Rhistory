scale_fill_gradientn(colors = pal) +
scale_color_gradientn(colors = pal, guide = NULL) +
geom_sf(data = world_base_map, fill = "transparent") +
labs(fill = "GDE") +
theme_minimal() +
labs(title = "Observed GDE")
ggplot() +
geom_sf(data = response_sf, aes(fill = sqrt_pi, color = sqrt_pi)) +
scale_fill_gradientn(colors = pal) +
scale_color_gradientn(colors = pal, guide = NULL) +
geom_sf(data = world_base_map, fill = "transparent") +
labs(fill = "GDM") +
theme_minimal() +
labs(title = "Observed GDM")
ggplot() +
geom_sf(data = response_sf, aes(fill = hill_1, color = hill_1)) +
scale_fill_gradientn(colors = pal) +
scale_color_gradientn(colors = pal, guide = NULL) +
geom_sf(data = world_base_map, fill = "transparent") +
labs(fill = "GDE") +
theme_minimal() +
labs(title = "Observed GDE")
# read in model so we don't have to run it again
model_top_3_gdm <- read_rds(here("output", "models", "glmm_top_3_gdm.rds"))
predictors_norm_gdm <- read_sf(here("output", "spreadsheets", "normalized_predictors_gdm.geojson"))
global_prediction_gdm <- read_csv(here("output", "spreadsheets", "global_posterior_predictions_gdm.csv"))
# need these to get the upper and lower HDI, since I don't know how to subset output within a summarize call
upper_hdi <- function(x) {
u <- HDInterval::hdi(x)["upper"]
return(u)
}
lower_hdi <- function(x){
l <- HDInterval::hdi(x)["lower"]
return(l)
}
# I'm not good enough at regex to make this more succinct
global_pred_intervals_gdm <- global_prediction_gdm %>%
as_tibble() %>%
summarize_all(list(median = median, upper = upper_hdi, lower = lower_hdi)) %>%
pivot_longer(everything(),
names_to = c("remove", "cell_old", "summary_stat"),
names_sep = "_",
values_to = "value") %>%
select(-remove) %>%
pivot_wider(names_from = summary_stat,
values_from = value) %>%
mutate(range = upper - lower,
cell = predictors_norm_gdm$cell)
head(predictors_norm_gdm)
predictors_norm_gdm <- read_sf(here("output", "spreadsheets", "normalized_predictors_gdm.geojson"),
crs = "+proj=cea +lon_0=0 +lat_ts=30 +x_0=0 +y_0=0 +datum=WGS84 +ellps=WGS84 +units=m +no_defs")
predictors_norm <- read_sf(here("output", "spreadsheets", "normalized_predictors_gde.geojson"),
crs = "+proj=cea +lon_0=0 +lat_ts=30 +x_0=0 +y_0=0 +datum=WGS84 +ellps=WGS84 +units=m +no_defs")
# need these to get the upper and lower HDI, since I don't know how to subset output within a summarize call
upper_hdi <- function(x) {
u <- HDInterval::hdi(x)["upper"]
return(u)
}
lower_hdi <- function(x){
l <- HDInterval::hdi(x)["lower"]
return(l)
}
# I'm not good enough at regex to make this more succinct
global_pred_intervals <- global_prediction %>%
as_tibble() %>%
summarize_all(list(median = median, upper = upper_hdi, lower = lower_hdi)) %>%
pivot_longer(everything(),
names_to = c("remove", "cell_old", "summary_stat"),
names_sep = "_",
values_to = "value") %>%
select(-remove) %>%
pivot_wider(names_from = summary_stat,
values_from = value) %>%
mutate(range = upper - lower)
global_prediction <- read_csv(here("output", "spreadsheets", "global_posterior_predictions_gde.csv"))
# need these to get the upper and lower HDI, since I don't know how to subset output within a summarize call
upper_hdi <- function(x) {
u <- HDInterval::hdi(x)["upper"]
return(u)
}
lower_hdi <- function(x){
l <- HDInterval::hdi(x)["lower"]
return(l)
}
# I'm not good enough at regex to make this more succinct
global_pred_intervals <- global_prediction %>%
as_tibble() %>%
summarize_all(list(median = median, upper = upper_hdi, lower = lower_hdi)) %>%
pivot_longer(everything(),
names_to = c("remove", "cell_old", "summary_stat"),
names_sep = "_",
values_to = "value") %>%
select(-remove) %>%
pivot_wider(names_from = summary_stat,
values_from = value) %>%
mutate(range = upper - lower)
map_sf <- bind_cols(global_predictors, global_pred_intervals) %>%
select(-cell_old)
predictors <- names(as_tibble(model_top_5_nc$X))[-1]
model_top_5_nc <- read_rds(here("output", "models", "glmm_top_5_new_stab.rds"))
predictors <- names(as_tibble(model_top_5_nc$X))[-1]
# Read in predictor rasters
rast_list_medium <- list.files(here("data", "climate_agg"),
pattern = "medium",
full.names = TRUE)
rast_list_pred <- rast_list_medium[str_detect(rast_list_medium,
paste(predictors, collapse = "|"))]
rasters_full_medium <- raster::stack(rast_list_pred)
crs(rasters_full_medium) <- "+proj=cea +lon_0=0 +lat_ts=30 +x_0=0 +y_0=0 +datum=WGS84 +ellps=WGS84 +units=m +no_defs"
# get cell names from the raster in case we need to pair with old rasters down the line
cells <- rasters_full_medium %>%
as.data.frame() %>%
na.omit() %>%
rownames()
# read in the stability geojson files
stability_sf <- read_sf(here("data", "climate_poly", "new_stability.geojson"),
crs = "+proj=cea +lon_0=0 +lat_ts=30 +x_0=0 +y_0=0 +datum=WGS84 +ellps=WGS84 +units=m +no_defs")
# convert to data frame and add in the stability data
global_predictors <- rasters_full_medium %>%
rasterToPolygons() %>%
st_as_sf() %>%
st_join(stability_sf, join = st_equals) %>%
mutate(cell = cells) %>%
rename(temp_trend = GlobalExtreme_tsTrendExt,
temp_var = GlobalExtreme_tsVarExt,
precip_trend = GlobalExtreme_prTrendExt) %>%
select(-GlobalExtreme_prVarExt)
global_centroids <- global_predictors %>%
st_centroid(of_largest_polygon = TRUE) %>%
st_coordinates()
global_predictors <- global_predictors %>%
mutate(lon_scaled = global_centroids[,"X"] * 0.000001,
lat_scaled = global_centroids[,"Y"] * 0.000001)
# get the mean and sd of the original data to convert the standardized data back to it's original values
original_df <- new_stab_spatial %>%
select(cell) %>%
mutate(cell = as.character(cell)) %>%
left_join(global_predictors)
original_mean <- original_df %>%
summarize_if(is.numeric, mean)
original_sd <- original_df %>%
summarize_if(is.numeric, sd)
predictors_norm <- global_predictors %>%
mutate(
current_medium_bio_13 = (current_medium_bio_13 - original_mean$current_medium_bio_13) / original_sd$current_medium_bio_13,
current_medium_bio_5 = (current_medium_bio_5 - original_mean$current_medium_bio_5) / original_sd$current_medium_bio_5,
temp_trend = (temp_trend - original_mean$temp_trend) / original_sd$temp_trend,
temp_var = (temp_var - original_mean$temp_var) / temp_var,
precip_trend = (precip_trend - original_mean$precip_trend) / original_sd$precip_trend
)
# need these to get the upper and lower HDI, since I don't know how to subset output within a summarize call
upper_hdi <- function(x) {
u <- HDInterval::hdi(x)["upper"]
return(u)
}
lower_hdi <- function(x){
l <- HDInterval::hdi(x)["lower"]
return(l)
}
# I'm not good enough at regex to make this more succinct
global_pred_intervals <- global_prediction %>%
as_tibble() %>%
summarize_all(list(median = median, upper = upper_hdi, lower = lower_hdi)) %>%
pivot_longer(everything(),
names_to = c("remove", "cell_old", "summary_stat"),
names_sep = "_",
values_to = "value") %>%
select(-remove) %>%
pivot_wider(names_from = summary_stat,
values_from = value) %>%
mutate(range = upper - lower)
map_sf <- bind_cols(global_predictors, global_pred_intervals) %>%
select(-cell_old)
write_sf(map_sf, here("output", "spreadsheets", "global_pred_intervals_gde.geojson"))
map_sf <- read_sf(here("output", "spreadsheets", "global_pred_intervals_gde.geojson"),
crs = "+proj=cea +lon_0=0 +lat_ts=30 +x_0=0 +y_0=0 +datum=WGS84 +ellps=WGS84 +units=m +no_defs")
# need these to get the upper and lower HDI, since I don't know how to subset output within a summarize call
upper_hdi <- function(x) {
u <- HDInterval::hdi(x)["upper"]
return(u)
}
lower_hdi <- function(x){
l <- HDInterval::hdi(x)["lower"]
return(l)
}
# I'm not good enough at regex to make this more succinct
global_pred_intervals_gdm <- global_prediction_gdm %>%
as_tibble() %>%
summarize_all(list(median = median, upper = upper_hdi, lower = lower_hdi)) %>%
pivot_longer(everything(),
names_to = c("remove", "cell_old", "summary_stat"),
names_sep = "_",
values_to = "value") %>%
select(-remove) %>%
pivot_wider(names_from = summary_stat,
values_from = value) %>%
mutate(range = upper - lower)
map_sf_gdm <- left_join(global_predictors_gdm,
global_pred_intervals_gdm,
by = "cell") %>%
select(-cell_old)
predictors_gdm <- names(as_tibble(model_top_3_gdm$X))[-1]
# Read in predictor rasters
rast_list_medium <- list.files(here("data", "climate_agg"),
pattern = "medium",
full.names = TRUE)
rast_list_pred_gdm <- rast_list_medium[str_detect(rast_list_medium,
paste(predictors_gdm,
collapse = "|"))]
rasters_full_medium_gdm <- raster::stack(rast_list_pred_gdm)
crs(rasters_full_medium_gdm) <- "+proj=cea +lon_0=0 +lat_ts=30 +x_0=0 +y_0=0 +datum=WGS84 +ellps=WGS84 +units=m +no_defs"
# get cell names from the raster in case we need to pair with old rasters down the line
cells_gdm <- rasters_full_medium_gdm %>%
as.data.frame() %>%
na.omit() %>%
rownames()
# read in the stability geojson files
stability_sf <- read_sf(here("data", "climate_poly", "new_stability.geojson"),
crs = "+proj=cea +lon_0=0 +lat_ts=30 +x_0=0 +y_0=0 +datum=WGS84 +ellps=WGS84 +units=m +no_defs")
# convert to data frame and add in the stability data
global_predictors_gdm <- rasters_full_medium_gdm %>%
rasterToPolygons() %>%
st_as_sf() %>%
st_join(stability_sf, join = st_equals) %>%
mutate(cell = cells) %>%
rename(temp_trend = GlobalExtreme_tsTrendExt,
temp_var = GlobalExtreme_tsVarExt,
precip_trend = GlobalExtreme_prTrendExt) %>%
select(-GlobalExtreme_prVarExt, -temp_trend, -temp_var)
global_centroids_gdm <- global_predictors_gdm %>%
st_centroid(of_largest_polygon = TRUE) %>%
st_coordinates()
global_predictors_gdm <- global_predictors_gdm %>%
mutate(lon_scaled = global_centroids[,"X"] * 0.000001,
lat_scaled = global_centroids[,"Y"] * 0.000001)
# get the mean and sd of the original data to convert the standardized data back to it's original values
original_df_gdm <- new_stab_spatial %>%
select(cell) %>%
mutate(cell = as.character(cell)) %>%
left_join(global_predictors_gdm)
original_mean_gdm <- original_df_gdm %>%
summarize_if(is.numeric, mean)
original_sd_gdm <- original_df_gdm %>%
summarize_if(is.numeric, sd)
predictors_norm_gdm <- global_predictors_gdm %>%
mutate(
current_medium_bio_15 = (current_medium_bio_15 - original_mean_gdm$current_medium_bio_15) / original_sd_gdm$current_medium_bio_15,
current_medium_bio_5 = (current_medium_bio_5 - original_mean_gdm$current_medium_bio_5) / original_sd_gdm$current_medium_bio_5,
precip_trend = (precip_trend - original_mean_gdm$precip_trend) / original_sd_gdm$precip_trend
) %>%
# there's one NA in current_medium_bio_15
filter(!is.na(current_medium_bio_15))
write_sf(predictors_norm_gdm, here("output", "spreadsheets", "normalized_predictors_gdm.geojson"))
map_sf_gdm <- left_join(global_predictors_gdm,
global_pred_intervals_gdm,
by = "cell") %>%
select(-cell_old)
global_pred_intervals_gdm
nrow(predictors_norm_gdm$cell)
nrow(predictors_norm_gdm)
# need these to get the upper and lower HDI, since I don't know how to subset output within a summarize call
upper_hdi <- function(x) {
u <- HDInterval::hdi(x)["upper"]
return(u)
}
lower_hdi <- function(x){
l <- HDInterval::hdi(x)["lower"]
return(l)
}
# I'm not good enough at regex to make this more succinct
global_pred_intervals_gdm <- global_prediction_gdm %>%
as_tibble() %>%
summarize_all(list(median = median, upper = upper_hdi, lower = lower_hdi)) %>%
pivot_longer(everything(),
names_to = c("remove", "cell_old", "summary_stat"),
names_sep = "_",
values_to = "value") %>%
select(-remove) %>%
pivot_wider(names_from = summary_stat,
values_from = value) %>%
mutate(range = upper - lower,
cell = predictors_norm_gdm$cell)
map_sf_gdm <- left_join(global_predictors_gdm,
global_pred_intervals_gdm,
by = "cell") %>%
select(-cell_old)
ggplot() +
geom_sf(data = map_sf_gdm, aes(fill = median, color = median)) +
scale_fill_gradientn(colors = pal) +
scale_color_gradientn(colors = pal, guide = NULL) +
geom_sf(data = world_base_map, fill = "transparent") +
labs(fill = "GDM") +
theme_minimal() +
labs(title = "Global map of genetic diversity median")
ggplot() +
geom_sf(data = map_sf_gdm, aes(fill = range, color = range)) +
scale_fill_gradientn(colors = pal) +
scale_color_gradientn(colors = pal, guide = NULL) +
geom_sf(data = world_base_map, fill = "transparent") +
labs(fill = "GDM Range") +
theme_minimal() +
labs(title = "Prediction precision (upper 95% HPDI - lower 95% HPDI)")
map_sf_gdm
?st_centroid
map_sf_lat <- map_sf %>%
bind_cols(st_centroid(map_sf, of_largest_polygon = TRUE))
map_sf_lat
st_centroid(map_sf, of_largest_polygon = TRUE) %>% View()
rm(map_sf_lat)
map_sf %>%
ggplot(aes(x = lat_scaled, y = median)) +
geom_point() +
geom_smooth()
ggplot() + geom_sf(data = world_base_map)
ggplot() + geom_sf(data = world_base_map)
ggplot() + geom_sf(data = world_base_map, aes(x = lon_scaled, y = lat_scaled))
ggplot() + geom_sf(data = response_sf, aes(x = lon_scaled, y = lat_scaled))
ggplot() + geom_sf(data = response_sf)
ggplot() + geom_sf(data = response_sf, aes(fill - lat_scaled, color = lat_scaled))
ggplot() + geom_sf(data = map_sf, aes(fill - lat_scaled, color = lat_scaled))
ggplot() + geom_sf(data = map_sf, aes(fill = lat_scaled, color = lat_scaled))
ggplot() + geom_sf(data = map_sf, aes(fill = lat_scaled, color = lat_scaled)) + scale_fill_gradient2() + scale_color_gradient2()
new_stab_sf %>%
ggplot(aes(x = lat_scaled, y = hill_1)) +
geom_point() +
geom_smooth()
new_stab_sf %>%
ggplot(aes(x = lat_scaled, y = hill_1)) +
geom_point() +
geom_smooth()
ggplot() +
geom_point(data = new_stab_sf, aes(x = lat_scaled, y = hill_1), color = "darkgray") +
geom_smooth(data = new_stab_sf, aes(x = lat_scaled, y = hill_1), color = "darkgray")
ggplot() +
geom_point(data = new_stab_sf, aes(x = lat_scaled, y = hill_1), color = "black") +
geom_smooth(data = new_stab_sf, aes(x = lat_scaled, y = hill_1), color = "black")
ggplot() +
geom_point(data = new_stab_sf, aes(x = lat_scaled, y = hill_1), color = "black") +
geom_smooth(data = new_stab_sf, aes(x = lat_scaled, y = hill_1), color = "black") +
geom_point(data = map_sf, aes(x = lat_scaled, y = median), color = "darkgray") +
geom_smooth(data = map_sf, aes(x = lat_scaled, y = median), color = "darkgray") +
theme_minimal()
ggplot() +
geom_smooth(data = map_sf, aes(x = lat_scaled, y = median), color = "darkgray") +
theme_minimal() +
geom_point(data = new_stab_sf, aes(x = lat_scaled, y = hill_1), color = "black") +
geom_smooth(data = new_stab_sf, aes(x = lat_scaled, y = hill_1), color = "black") +
geom_point(data = map_sf, aes(x = lat_scaled, y = median), color = "darkgray")
ggplot() +
geom_point(data = map_sf, aes(x = lat_scaled, y = median), color = "darkgray") +
geom_smooth(data = map_sf, aes(x = lat_scaled, y = median), color = "darkgray") +
geom_point(data = new_stab_sf, aes(x = lat_scaled, y = hill_1), color = "black") +
geom_smooth(data = new_stab_sf, aes(x = lat_scaled, y = hill_1), color = "black") +
theme_minimal()
ggplot() +
geom_point(data = map_sf, aes(x = lat_scaled, y = median), color = "darkgray", alpha = 0.4) +
geom_smooth(data = map_sf, aes(x = lat_scaled, y = median), color = "darkgreen") +
geom_point(data = new_stab_sf, aes(x = lat_scaled, y = hill_1), color = "darkgreen") +
geom_smooth(data = new_stab_sf, aes(x = lat_scaled, y = hill_1), color = "darkgreen") +
theme_minimal()
ggplot() +
geom_point(data = map_sf, aes(x = lat_scaled, y = median), color = "darkgray", alpha = 0.4) +
geom_smooth(data = map_sf, aes(x = lat_scaled, y = median), color = "darkgray") +
geom_point(data = new_stab_sf, aes(x = lat_scaled, y = hill_1), color = "darkgreen") +
geom_smooth(data = new_stab_sf, aes(x = lat_scaled, y = hill_1), color = "darkgreen") +
theme_minimal()
ggplot() +
geom_point(data = map_sf, aes(x = lat_scaled, y = median), color = "darkgray", alpha = 0.4) +
geom_smooth(data = map_sf, aes(x = lat_scaled, y = median), color = "black") +
geom_point(data = new_stab_sf, aes(x = lat_scaled, y = hill_1), color = "darkgreen") +
geom_smooth(data = new_stab_sf, aes(x = lat_scaled, y = hill_1), color = "darkgreen") +
theme_minimal()
ggplot() +
geom_point(data = map_sf, aes(x = lat_scaled, y = median), color = "darkgray", alpha = 0.4) +
geom_smooth(data = map_sf, aes(x = lat_scaled, y = median), color = "black") +
geom_point(data = new_stab_sf, aes(x = lat_scaled, y = hill_1), color = "darkgreen") +
geom_smooth(data = new_stab_sf, aes(x = lat_scaled, y = hill_1), color = "darkgreen") +
labs(x = "Latitude", y = "GDE",
title = "Observed and modeled GDE across latitude",
caption = "Dark green points and trendline indicates observed GDE and gray points with black trendline indicate modeled GDE")
theme_minimal()
ggplot() +
geom_point(data = map_sf, aes(x = lat_scaled, y = median), color = "darkgray", alpha = 0.4) +
geom_smooth(data = map_sf, aes(x = lat_scaled, y = median), color = "black") +
geom_point(data = new_stab_sf, aes(x = lat_scaled, y = hill_1), color = "darkgreen") +
geom_smooth(data = new_stab_sf, aes(x = lat_scaled, y = hill_1), color = "darkgreen") +
labs(x = "Latitude", y = "GDE",
title = "Observed and modeled GDE across latitude",
caption = "Dark green points and trendline indicates observed GDE and gray points with black trendline indicate modeled GDE") +
theme_minimal()
ggplot() +
geom_point(data = map_sf, aes(x = lat_scaled, y = median), color = "darkgray", alpha = 0.4) +
geom_smooth(data = map_sf, aes(x = lat_scaled, y = median), color = "black") +
geom_point(data = new_stab_sf, aes(x = lat_scaled, y = hill_1), color = "darkgreen") +
geom_smooth(data = new_stab_sf, aes(x = lat_scaled, y = hill_1), color = "darkgreen") +
labs(x = "Latitude", y = "GDE",
title = "Observed and modeled GDE across latitude",
caption = str_wrap("Dark green points and trendline indicates observed GDE and gray points with black trendline indicate modeled GDE")) +
theme_minimal()
ggplot() +
geom_point(data = map_sf_gdm, aes(x = lat_scaled, y = median), color = "darkgray", alpha = 0.4) +
geom_smooth(data = map_sf_gdm, aes(x = lat_scaled, y = median), color = "black") +
geom_point(data = new_stab_sf, aes(x = lat_scaled, y = sqrt_pi), color = "darkgreen") +
geom_smooth(data = new_stab_sf, aes(x = lat_scaled, y = sqrt_pi), color = "darkgreen") +
labs(x = "Latitude", y = "GDM",
title = "Observed and modeled GDM across latitude",
caption = str_wrap("Dark green points and trendline indicates observed GDM and gray points with black trendline indicate modeled GDM")) +
theme_minimal()
ggplot() +
geom_point(data = map_sf_gdm, aes(x = lat_scaled, y = median), color = "darkgray", alpha = 0.4) +
geom_smooth(data = map_sf_gdm, aes(x = lat_scaled, y = median), color = "black", se = FALSE) +
geom_point(data = new_stab_sf, aes(x = lat_scaled, y = sqrt_pi), color = "darkgreen") +
geom_smooth(data = new_stab_sf, aes(x = lat_scaled, y = sqrt_pi), color = "darkgreen", se = FALSE) +
labs(x = "Latitude", y = "GDM",
title = "Observed and modeled GDM across latitude",
caption = str_wrap("Dark green points and trendline indicates observed GDM and gray points with black trendline indicate modeled GDM")) +
theme_minimal()
ggplot() +
geom_point(data = map_sf_gdm, aes(x = lat_scaled, y = median), color = "darkgray", alpha = 0.4) +
geom_smooth(data = map_sf_gdm, aes(x = lat_scaled, y = median), color = "black", se = FALSE) +
geom_point(data = new_stab_sf, aes(x = lat_scaled, y = sqrt_pi), color = "darkgreen") +
geom_smooth(data = new_stab_sf, aes(x = lat_scaled, y = sqrt_pi), color = "darkgreen", se = FALSE) +
labs(x = "Latitude", y = "GDM",
title = "Observed and modeled GDM across latitude",
caption = str_wrap("Dark green points and trendline indicates observed GDM and gray points with black trendline indicate modeled GDM")) +
theme_minimal()
ggplot() +
geom_point(data = map_sf, aes(x = lat_scaled, y = median), color = "darkgray", alpha = 0.4) +
stat_smooth(data = map_sf,
aes(x = lat_scaled, y = median),
method = "lm", formula = y ~ x + I(x^2),
color = "black") +
geom_point(data = new_stab_sf, aes(x = lat_scaled, y = hill_1), color = "darkgreen") +
stat_smooth(data = new_stab_sf,
aes(x = lat_scaled, y = hill_1),
method = "lm", formula = y ~ x + I(x^2),
color = "darkgreen") +
labs(x = "Latitude", y = "GDE",
title = "Observed and modeled GDE across latitude",
caption = str_wrap("Dark green points and trendline indicates observed GDE and gray points with black trendline indicate modeled GDE")) +
theme_minimal()
ggplot() +
geom_point(data = map_sf_gdm, aes(x = lat_scaled, y = median), color = "darkgray", alpha = 0.4) +
stat_smooth(data = map_sf_gdm,
aes(x = lat_scaled, y = median),
method = "lm", formula = y ~ x + I(x^2),
color = "black",
se = FALSE) +
geom_point(data = new_stab_sf, aes(x = lat_scaled, y = sqrt_pi), color = "darkgreen") +
stat_smooth(data = new_stab_sf,
aes(x = lat_scaled, y = sqrt_pi),
method = "lm", formula = y ~ x + I(x^2),
color = "darkgreen",
se = FALSE) +
labs(x = "Latitude", y = "GDM",
title = "Observed and modeled GDM across latitude",
caption = str_wrap("Dark green points and trendline indicates observed GDM and gray points with black trendline indicate modeled GDM")) +
theme_minimal()
ggplot() +
geom_point(data = map_sf, aes(x = lat_scaled, y = median), color = "darkgray", alpha = 0.4) +
stat_smooth(data = map_sf,
aes(x = lat_scaled, y = median),
method = "lm", formula = y ~ x + I(x^2),
color = "black") +
geom_point(data = new_stab_sf, aes(x = lat_scaled, y = hill_1), color = "darkgreen") +
stat_smooth(data = new_stab_sf,
aes(x = lat_scaled, y = hill_1),
method = "lm", formula = y ~ x + I(x^2),
color = "darkgreen") +
labs(x = "Latitude", y = "GDE",
title = "Observed and predicted GDE across latitude",
caption = str_wrap("Dark green points and trendline indicates observed GDE and gray points with black trendline indicate GDE predicted across the globe")) +
theme_minimal()
summary(lm(hill_1 ~ lat_scaled + I(lat_scaled^2)))
summary(lm(hill_1 ~ lat_scaled + I(lat_scaled^2), data = new_stab_sf))
summary(lm(sqrt_pi ~ lat_scaled + I(lat_scaled^2), data = new_stab_sf))
ggplot() +
geom_point(data = map_sf_gdm, aes(x = lat_scaled, y = median), color = "darkgray", alpha = 0.4) +
stat_smooth(data = map_sf_gdm,
aes(x = lat_scaled, y = median),
method = "lm", formula = y ~ x + I(x^2),
color = "black",
se = FALSE) +
geom_point(data = new_stab_sf, aes(x = lat_scaled, y = sqrt_pi), color = "darkgreen") +
stat_smooth(data = new_stab_sf,
aes(x = lat_scaled, y = sqrt_pi),
method = "lm", formula = y ~ x + I(x^2),
color = "darkgreen",
se = FALSE) +
labs(x = "Latitude", y = "GDM",
title = "Observed and predicted GDM across latitude",
caption = str_wrap("Dark green points and trendline indicates observed GDM and gray points with black trendline indicate predicted GDM")) +
theme_minimal()
ggplot() +
geom_point(data = map_sf, aes(x = lat_scaled, y = median), color = "darkgray", alpha = 0.4) +
stat_smooth(data = map_sf,
aes(x = lat_scaled, y = median),
method = "lm",
formula = y ~ x + I(x^2),
se = FALSE,
color = "black") +
geom_point(data = new_stab_sf, aes(x = lat_scaled, y = hill_1), color = "darkgreen") +
stat_smooth(data = new_stab_sf,
aes(x = lat_scaled, y = hill_1),
method = "lm",
formula = y ~ x + I(x^2),
se = FALSE,
color = "darkgreen") +
labs(x = "Latitude", y = "GDE",
title = "Observed and predicted GDE across latitude",
caption = str_wrap("Dark green points and trendline indicates observed GDE and gray points with black trendline indicate GDE predicted across the globe")) +
theme_minimal()
