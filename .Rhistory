)
),
server = function(input, output) {
ss_poly <- reactive(df <-
sumstat_poly)
ss_lm <- reactive({
lm(reformulate(input$explanatory, input$sumstat), data = ss_poly())
})
basemap <- reactive({
ggplot() +
geom_sf(data = world_basemap,
fill = "transparent",
show.legend = FALSE)
})
output$sumstat_plot <- renderPlotly({
ggplotly(
basemap() +
geom_sf(
data = ss_poly(),
aes_string(fill = input$sumstat),
size = 0.1
) +
scale_fill_gradientn(colors = pal, guide = NULL) +
labs(title = paste0("Map of ", input$sumstat)) +
ggthemes::theme_map()
) %>%
layout(
images = list(
source = base64enc::dataURI(file = here(
"output", "legends", paste0(input$sumstat, "_", input$resolution, ".png"))
),
x = 0,
y = 0,
sizex = 0.75,
sizey = 0.75,
xref = "paper",
yref = "paper",
xanchor = "left",
yanchor = "bottom"
),
margin = list(t = 50)
)
})
output$scatterplot <- renderPlot({
ggplot(data = ss_poly(), aes_string(x = input$explanatory, y = input$sumstat)) +
geom_point() +
geom_smooth(method = "lm") +
theme_minimal()
})
output$lm_table <- render_gt({
lm_tidy <- ss_lm() %>%
tidy() %>%
slice(-1) %>%
select(estimate, p.value)
lm_glance <- ss_lm() %>%
glance() %>%
select(r.squared)
bind_cols(lm_tidy, lm_glance) %>%
gt() %>%
fmt_number(everything(), decimals = 3)
})
},
options = list(height = 700)
)
shinyApp(
ui = fluidPage(
fluidRow(
column(3,
selectInput("resolution", "Spatial Resolution",
choices = resolutions)
),
column(3,
selectInput("sumstat", "Summary Statistic",
choices = names(sumstats))
),
column(3,
selectInput("explanatory", "Explanatory Variable",
choices = explanatory_vars)
)
),
fluidRow(
column(plotlyOutput("sumstat_plot", inline = TRUE), width = 10)
),
fluidRow(
column(plotOutput("scatterplot"), width = 7),
column(gt_output("lm_table"), width = 4)
)
),
server = function(input, output) {
ss_poly <- reactive(df <-
sumstat_poly)
ss_lm <- reactive({
lm(reformulate(input$explanatory, input$sumstat), data = ss_poly())
})
basemap <- reactive({
ggplot() +
geom_sf(data = world_basemap,
fill = "transparent",
show.legend = FALSE)
})
output$sumstat_plot <- renderPlotly({
ggplotly(
basemap() +
geom_sf(
data = ss_poly(),
aes_string(fill = input$sumstat),
size = 0.1
) +
scale_fill_gradientn(colors = pal, guide = NULL) +
labs(title = paste0("Map of ", input$sumstat)) +
ggthemes::theme_map()
) %>%
layout(
images = list(
source = base64enc::dataURI(file = here(
"output", "legends", paste0(input$sumstat, "_", input$resolution, ".png"))
),
x = 0,
y = 0,
sizex = 0.75,
sizey = 0.75,
xref = "paper",
yref = "paper",
xanchor = "left",
yanchor = "bottom"
),
margin = list(t = 50)
)
})
output$scatterplot <- renderPlot({
ggplot(data = ss_poly(), aes_string(x = input$explanatory, y = input$sumstat)) +
geom_point() +
geom_smooth(method = "lm") +
theme_minimal()
})
output$lm_table <- render_gt({
lm_tidy <- ss_lm() %>%
tidy() %>%
slice(-1) %>%
select(estimate, p.value)
lm_glance <- ss_lm() %>%
glance() %>%
select(r.squared)
bind_cols(lm_tidy, lm_glance) %>%
gt() %>%
fmt_number(everything(), decimals = 3)
})
},
options = list(height = 700)
)
create_poly <- function(resolution){
rast <- raster(get(paste0("template_", resolution)))
vals <- rep(NA, ncell(rast))
sumstats <- get("sumstats")
explanatory <- get("explanatory")
vals[sumstats$cell] <- sumstats$avg_pi
rast <- setValues(rast, values = vals)
rast_poly <- rasterToPolygons(rast) %>%
st_as_sf() %>%
rename(avg_pi = layer) %>%
bind_cols(sumstats %>% select(-avg_pi),
explanatory)
return(rast_poly)
}
spread_path <- here("output", "spreadsheets")
sumstats <- read_csv(file.path(spread_path, "med_3_10_sumstats.csv")) %>%
mutate(log_num_otu = log10(num_otu),
log_num_ind = log10(num_ind)) %>%
filter(avg_pi < 0.02) # outlier cell
explanatory_path <- here("data", "climate_agg")
explanatory_files <- list.files(explanatory_path, pattern = "*medium*", full.names = TRUE)
explanatory_rasters <- stack(explanatory_files)
names(explanatory_rasters) <- str_remove(basename(explanatory_files), ".tif")
explanatory_vars <- names(explanatory_rasters)
explanatory <- explanatory_rasters[sumstats$cell]
names(explanatory) <- names(explanatory_rasters)
explanatory <- as_tibble(explanatory)
template_medium <- raster(here("data", "templates", "template_medium.tif"))
world_basemap <-
ne_coastline(scale = "small", returnclass = "sf") %>%
st_transform(crs(template_medium)) %>%
st_simplify()
pal <- wes_palette("Zissou1", 100, type = "continuous")
sumstats <- colnames(sumstats %>%
select(-cell)) %>%
set_names()
create_poly <- function(resolution){
rast <- raster(get(paste0("template_", resolution)))
vals <- rep(NA, ncell(rast))
sumstats <- get("sumstats")
explanatory <- get("explanatory")
vals[sumstats$cell] <- sumstats$avg_pi
rast <- setValues(rast, values = vals)
rast_poly <- rasterToPolygons(rast) %>%
st_as_sf() %>%
rename(avg_pi = layer) %>%
bind_cols(sumstats %>% select(-avg_pi),
explanatory)
return(rast_poly)
}
write_legends <- function(sumstat, resolution) {
filename <-
here("output",
"legends",
paste0(sumstat, "_", resolution, ".png"))
if (!file.exists(filename)) {
sumstat_poly <- create_poly(resolution)
sumstat_leg <- ggplot() +
geom_sf(data = sumstat_poly, aes(fill = .data[[sumstat]]), size = 0.1) +
scale_fill_gradientn(colors = pal, name = sumstat) +
theme(legend.background = element_rect(fill = alpha("white", 0.5)))
sumstat_leg <- sumstat_leg %>%
cowplot::get_legend()
ggsave(
sumstat_leg,
filename = filename,
width = 2,
height = 3,
bg = "transparent"
)
}
}
# resolutions <- "medium"
#
# sumstat_poly <- vector(mode = "list", length = 1)
#
# names(sumstat_poly) <- c("medium")
#
# for (res in seq_along(resolutions)) {
#   map(sumstats, ~write_legends(.x, resolution = resolutions[res]))
#   sumstat_poly[[res]] <- create_poly(resolutions[res])
#}
map(names(sumstats), ~write_legends(.x, resolution = "medium"))
sumstat_poly <- create_poly("medium")
sumstats
sumstats[[avg_pi]]
sumstats[["avg_pi"]]
sumstats["avg_pi"]
spread_path <- here("output", "spreadsheets")
sumstats <- read_csv(file.path(spread_path, "med_3_10_sumstats.csv")) %>%
mutate(log_num_otu = log10(num_otu),
log_num_ind = log10(num_ind)) %>%
filter(avg_pi < 0.02) # outlier cell
create_poly <- function(resolution){
rast <- raster(get(paste0("template_", resolution)))
vals <- rep(NA, ncell(rast))
sumstats <- get("sumstats")
explanatory <- get("explanatory")
vals[sumstats$cell] <- sumstats[[avg_pi]]
rast <- setValues(rast, values = vals)
rast_poly <- rasterToPolygons(rast) %>%
st_as_sf() %>%
rename(avg_pi = layer) %>%
bind_cols(sumstats %>% select(-avg_pi),
explanatory)
return(rast_poly)
}
write_legends <- function(sumstat, resolution) {
filename <-
here("output",
"legends",
paste0(sumstat, "_", resolution, ".png"))
if (!file.exists(filename)) {
sumstat_poly <- create_poly(resolution)
sumstat_leg <- ggplot() +
geom_sf(data = sumstat_poly, aes(fill = .data[[sumstat]]), size = 0.1) +
scale_fill_gradientn(colors = pal, name = sumstat) +
theme(legend.background = element_rect(fill = alpha("white", 0.5)))
sumstat_leg <- sumstat_leg %>%
cowplot::get_legend()
ggsave(
sumstat_leg,
filename = filename,
width = 2,
height = 3,
bg = "transparent"
)
}
}
# resolutions <- "medium"
#
# sumstat_poly <- vector(mode = "list", length = 1)
#
# names(sumstat_poly) <- c("medium")
#
# for (res in seq_along(resolutions)) {
#   map(sumstats, ~write_legends(.x, resolution = resolutions[res]))
#   sumstat_poly[[res]] <- create_poly(resolutions[res])
#}
map(names(sumstats), ~write_legends(.x, resolution = "medium"))
sumstat_poly <- create_poly("medium")
create_poly <- function(resolution){
rast <- raster(get(paste0("template_", resolution)))
vals <- rep(NA, ncell(rast))
sumstats <- get("sumstats")
explanatory <- get("explanatory")
vals[sumstats$cell] <- sumstats$avg_pi
rast <- setValues(rast, values = vals)
rast_poly <- rasterToPolygons(rast) %>%
st_as_sf() %>%
rename(avg_pi = layer) %>%
bind_cols(sumstats %>% select(-avg_pi),
explanatory)
return(rast_poly)
}
write_legends <- function(sumstat, resolution) {
filename <-
here("output",
"legends",
paste0(sumstat, "_", resolution, ".png"))
if (!file.exists(filename)) {
sumstat_poly <- create_poly(resolution)
sumstat_leg <- ggplot() +
geom_sf(data = sumstat_poly, aes(fill = .data[[sumstat]]), size = 0.1) +
scale_fill_gradientn(colors = pal, name = sumstat) +
theme(legend.background = element_rect(fill = alpha("white", 0.5)))
sumstat_leg <- sumstat_leg %>%
cowplot::get_legend()
ggsave(
sumstat_leg,
filename = filename,
width = 2,
height = 3,
bg = "transparent"
)
}
}
# resolutions <- "medium"
#
# sumstat_poly <- vector(mode = "list", length = 1)
#
# names(sumstat_poly) <- c("medium")
#
# for (res in seq_along(resolutions)) {
#   map(sumstats, ~write_legends(.x, resolution = resolutions[res]))
#   sumstat_poly[[res]] <- create_poly(resolutions[res])
#}
map(names(sumstats), ~write_legends(.x, resolution = "medium"))
sumstat_poly <- create_poly("medium")
sumstat_poly
shinyApp(
ui = fluidPage(
fluidRow(
column(3,
selectInput("resolution", "Spatial Resolution",
choices = resolutions)
),
column(3,
selectInput("sumstat", "Summary Statistic",
choices = names(sumstats))
),
column(3,
selectInput("explanatory", "Explanatory Variable",
choices = explanatory_vars)
)
),
fluidRow(
column(plotlyOutput("sumstat_plot", inline = TRUE), width = 10)
),
fluidRow(
column(plotOutput("scatterplot"), width = 7),
column(gt_output("lm_table"), width = 4)
)
),
server = function(input, output) {
ss_poly <- reactive(df <-
sumstat_poly)
ss_lm <- reactive({
lm(reformulate(input$explanatory, input$sumstat), data = ss_poly())
})
basemap <- reactive({
ggplot() +
geom_sf(data = world_basemap,
fill = "transparent",
show.legend = FALSE)
})
output$sumstat_plot <- renderPlotly({
ggplotly(
basemap() +
geom_sf(
data = ss_poly(),
aes_string(fill = input$sumstat),
size = 0.1
) +
scale_fill_gradientn(colors = pal, guide = NULL) +
labs(title = paste0("Map of ", input$sumstat)) +
ggthemes::theme_map()
) %>%
layout(
images = list(
source = base64enc::dataURI(file = here(
"output", "legends", paste0(input$sumstat, "_", input$resolution, ".png"))
),
x = 0,
y = 0,
sizex = 0.75,
sizey = 0.75,
xref = "paper",
yref = "paper",
xanchor = "left",
yanchor = "bottom"
),
margin = list(t = 50)
)
})
output$scatterplot <- renderPlot({
ggplot(data = ss_poly(), aes_string(x = input$explanatory, y = input$sumstat)) +
geom_point() +
geom_smooth(method = "lm") +
theme_minimal()
})
output$lm_table <- render_gt({
lm_tidy <- ss_lm() %>%
tidy() %>%
slice(-1) %>%
select(estimate, p.value)
lm_glance <- ss_lm() %>%
glance() %>%
select(r.squared)
bind_cols(lm_tidy, lm_glance) %>%
gt() %>%
fmt_number(everything(), decimals = 3)
})
},
options = list(height = 700)
)
shinyApp(
ui = fluidPage(
fluidRow(
column(3,
selectInput("resolution", "Spatial Resolution",
choices = resolutions)
),
column(3,
selectInput("sumstat", "Summary Statistic",
choices = names(sumstats))
),
column(3,
selectInput("explanatory", "Explanatory Variable",
choices = explanatory_vars)
)
),
fluidRow(
column(plotlyOutput("sumstat_plot", inline = TRUE), width = 10)
),
fluidRow(
column(plotOutput("scatterplot"), width = 7),
column(gt_output("lm_table"), width = 4)
)
),
server = function(input, output) {
ss_poly <- reactive(df <-
sumstat_poly)
ss_lm <- reactive({
lm(reformulate(input$explanatory, input$sumstat), data = ss_poly())
})
basemap <- reactive({
ggplot() +
geom_sf(data = world_basemap,
fill = "transparent",
show.legend = FALSE)
})
output$sumstat_plot <- renderPlotly({
ggplotly(
basemap() +
geom_sf(
data = ss_poly(),
aes_string(fill = input$sumstat),
size = 0.1
) +
scale_fill_gradientn(colors = pal, guide = NULL) +
labs(title = paste0("Map of ", input$sumstat)) +
ggthemes::theme_map()
) %>%
layout(
images = list(
source = base64enc::dataURI(file = here(
"output", "legends", paste0(input$sumstat, "_", input$resolution, ".png"))
),
x = 0,
y = 0,
sizex = 0.75,
sizey = 0.75,
xref = "paper",
yref = "paper",
xanchor = "left",
yanchor = "bottom"
),
margin = list(t = 50)
)
})
output$scatterplot <- renderPlot({
ggplot(data = ss_poly(), aes_string(x = input$explanatory, y = input$sumstat)) +
geom_point() +
geom_smooth(method = "lm") +
theme_minimal()
})
output$lm_table <- render_gt({
lm_tidy <- ss_lm() %>%
tidy() %>%
slice(-1) %>%
select(estimate, p.value)
lm_glance <- ss_lm() %>%
glance() %>%
select(r.squared)
bind_cols(lm_tidy, lm_glance) %>%
gt() %>%
fmt_number(everything(), decimals = 3)
})
},
options = list(height = 700)
)
