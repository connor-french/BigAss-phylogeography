sd_pi,
var_pi,
hill_1 = hill_1_c,
hill_2 = hill_2_c,
hill_3 = hill_3_c,
hill_4 = hill_4_c,
hill_5 = hill_5_c
)
sumstats_300 <- read_csv(file.path(spread_path, "sumstats_300.csv")) %>%
mutate(log_num_otus = log10(richness)) %>%
select(
cells,
log_num_otus,
num_otus = richness,
avg_pi,
sd_pi,
var_pi,
hill_1 = hill_1_c,
hill_2 = hill_2_c,
hill_3 = hill_3_c,
hill_4 = hill_4_c,
hill_5 = hill_5_c
)
library(here)
library(sf)
library(rnaturalearth)
library(plotly)
library(cowplot)
library(wesanderson)
library(raster)
library(tidyverse)
library(broom)
library(gt)
library(shiny)
spread_path <- here("output", "spreadsheets")
sumstats_100 <- read_csv(file.path("output", "spreadsheets", "sumstats_100.csv")) %>%
mutate(log_num_otus = log10(richness)) %>%
select(
cells,
log_num_otus,
num_otus = richness,
avg_pi,
sd_pi,
var_pi,
hill_1 = hill_1_c,
hill_2 = hill_2_c,
hill_3 = hill_3_c,
hill_4 = hill_4_c,
hill_5 = hill_5_c
)
sumstats_200 <- read_csv(file.path(spread_path, "sumstats_200.csv")) %>%
mutate(log_num_otus = log10(richness)) %>%
select(
cells,
log_num_otus,
num_otus = richness,
avg_pi,
sd_pi,
var_pi,
hill_1 = hill_1_c,
hill_2 = hill_2_c,
hill_3 = hill_3_c,
hill_4 = hill_4_c,
hill_5 = hill_5_c
)
sumstats_300 <- read_csv(file.path(spread_path, "sumstats_300.csv")) %>%
mutate(log_num_otus = log10(richness)) %>%
select(
cells,
log_num_otus,
num_otus = richness,
avg_pi,
sd_pi,
var_pi,
hill_1 = hill_1_c,
hill_2 = hill_2_c,
hill_3 = hill_3_c,
hill_4 = hill_4_c,
hill_5 = hill_5_c
)
filter(sumstats_200, avg_pi > 0.02)
filter(sumstats_100, avg_pi > 0.02)
seqs <- read_csv("/Volumes/Linux-Shari/bigass-phylogeography/output/spreadsheets/seqstats_200.csv")
seqs_filt <- filter(seqs, cells == 4777)
seqs_filt
seqs_filt$bin_uri
seqs_filt$filename
library(ape)
dist <- read.FASTA("/Volumes/Linux-Shari/bigass-phylogeography/output/alignments_200/BOLD:AAB8379_4777.fas")
dist
alignment <- read.FASTA("/Volumes/Linux-Shari/bigass-phylogeography/output/alignments_200/BOLD:AAB8379_4777.fas")
?dist.dna
dist <- dist.dna(alignment, pairwise.deletion = TRUE, as.matrix = TRUE)
dist
max(dist)
min(dist)
seqs_paths <- file.path("/Volumes/Linux-Shari/bigass-phylogeography/output/alignments_200/", seqs_filt$filename)
seqs_paths
get_dist_mats <- function(filename) {
alignment <- read.FASTA(filename)
dist <- dist.dna(alignment, pairwise.deletion = TRUE, as.matrix = TRUE)
return(dist)
}
dist_mats <- purrr::map(seqs_paths, get_dist_mats)
seqs_paths <- file.path("/Volumes/Linux-Shari/bigass-phylogeography/output/alignments_200", seqs_filt$filename)
get_dist_mats <- function(filename) {
alignment <- read.FASTA(filename)
dist <- dist.dna(alignment, pairwise.deletion = TRUE, as.matrix = TRUE)
return(dist)
}
dist_mats <- purrr::map(seqs_paths, get_dist_mats)
dist_mats[[1]]
dist_mats[[2]]
dist_mats[[3]]
dist_mats[[4]]
dist_mats[[5]]
dist_mats[[6]]
seqs_filt
library(data.table)
library(here)
library(sf)
library(rnaturalearth)
library(plotly)
library(cowplot)
library(wesanderson)
library(raster)
library(tidyverse)
library(broom)
library(gt)
library(shiny)
library(here)
library(sf)
library(rnaturalearth)
library(plotly)
library(cowplot)
library(wesanderson)
library(raster)
library(tidyverse)
library(broom)
library(gt)
library(shiny)
spread_path <- here("output", "spreadsheets")
sumstats_100 <- read_csv(file.path("output", "spreadsheets", "sumstats_100.csv")) %>%
mutate(log_num_otus = log10(richness),
sqrt_pi = sqrt(avg_pi)) %>%
select(
cells,
log_num_otus,
num_otus = richness,
avg_pi,
sqrt_pi,
sd_pi,
var_pi,
hill_1 = hill_1_c,
hill_2 = hill_2_c,
hill_3 = hill_3_c,
hill_4 = hill_4_c,
hill_5 = hill_5_c
)
sumstats_200 <- read_csv(file.path(spread_path, "sumstats_200.csv")) %>%
mutate(log_num_otus = log10(richness),
sqrt_pi = sqrt(avg_pi)) %>%
select(
cells,
log_num_otus,
num_otus = richness,
avg_pi,
sd_pi,
var_pi,
hill_1 = hill_1_c,
hill_2 = hill_2_c,
hill_3 = hill_3_c,
hill_4 = hill_4_c,
hill_5 = hill_5_c
)
sumstats_300 <- read_csv(file.path(spread_path, "sumstats_300.csv")) %>%
mutate(log_num_otus = log10(richness),
sqrt_pi = sqrt(avg_pi)) %>%
select(
cells,
log_num_otus,
num_otus = richness,
avg_pi,
sd_pi,
var_pi,
hill_1 = hill_1_c,
hill_2 = hill_2_c,
hill_3 = hill_3_c,
hill_4 = hill_4_c,
hill_5 = hill_5_c
)
climate_100 <- stack(here("data", "climate", "rasters_100km", "chelsa_100km.tif"),
here("data", "climate", "rasters_100km", "pc_7_LGM_2_5min_agg_100.tif"))
names(climate_100) <- c(paste0("current_bio_", 1:19), paste0("lgm_bio_", 1:19))
explanatory_100 <- raster::extract(climate_100, sumstats_100$cells, df = TRUE)
climate_200 <- stack(here("data", "climate", "rasters_200km", "chelsa_200km.tif"),
here("data", "climate", "rasters_200km", "pc_7_LGM_2_5min_agg_200.tif"))
names(climate_200) <- c(paste0("current_bio_", 1:19), paste0("lgm_bio_", 1:19))
explanatory_200 <- raster::extract(climate_200, sumstats_200$cells, df = TRUE)
climate_300 <- stack(here("data", "climate", "rasters_300km", "chelsa_300km.tif"),
here("data", "climate", "rasters_300km", "pc_7_LGM_2_5min_agg_300.tif"))
names(climate_300) <- c(paste0("current_bio_", 1:19), paste0("lgm_bio_", 1:19))
explanatory_300 <- raster::extract(climate_300, sumstats_300$cells, df = TRUE)
explanatory_vars <- names(explanatory_100)[-1]
template_100 <-
stack(here("data", "climate", "rasters_100km", "chelsa_100km.tif"))
template_200 <-
stack(here("data", "climate", "rasters_200km", "chelsa_200km.tif"))
template_300 <-
stack(here("data", "climate", "rasters_300km", "chelsa_300km.tif"))
world_basemap <-
ne_coastline(scale = "small", returnclass = "sf") %>%
st_transform(crs(template_100)) %>%
st_simplify()
pal <- wes_palette("Zissou1", 100, type = "continuous")
sumstats <- colnames(sumstats_100 %>%
select(-cells)) %>%
set_names()
create_poly <- function(resolution){
rast <- raster(get(paste0("template_", resolution)))
vals <- rep(NA, ncell(rast))
sumstats <- get(paste0("sumstats_", resolution))
explanatory <- get(paste0("explanatory_", resolution))
vals[sumstats$cells] <- sumstats$avg_pi
rast <- setValues(rast, values = vals)
rast_poly <- rasterToPolygons(rast) %>%
st_as_sf() %>%
rename(avg_pi = layer) %>%
bind_cols(sumstats %>% select(-avg_pi),
explanatory)
}
write_legends <- function(sumstat, resolution) {
filename <-
here("output",
"legends",
paste0(sumstat, "_", resolution, ".png"))
if (!file.exists(filename)) {
sumstat_poly <- create_poly(resolution)
sumstat_leg <- ggplot() +
geom_sf(data = sumstat_poly, aes(fill = .data[[sumstat]]), size = 0.1) +
scale_fill_gradientn(colors = pal, name = sumstat) +
theme(legend.background = element_rect(fill = alpha("white", 0.5)))
sumstat_leg <- sumstat_leg %>%
cowplot::get_legend()
ggsave(
sumstat_leg,
filename = filename,
width = 2,
height = 3,
bg = "transparent"
)
}
}
resolutions <- c(100, 200, 300)
sumstat_poly <- vector(mode = "list", length = 3)
names(sumstat_poly) <- c("res_100", "res_200", "res_300")
for (res in seq_along(resolutions)) {
map(sumstats, ~write_legends(.x, resolution = resolutions[res]))
sumstat_poly[[res]] <- create_poly(resolutions[res])
}
sumstats
sumstats_100
sumstats_200
sumstats_300
spread_path <- here("output", "spreadsheets")
sumstats_100 <- read_csv(file.path("output", "spreadsheets", "sumstats_100.csv")) %>%
mutate(log_num_otus = log10(richness),
sqrt_pi = sqrt(avg_pi)) %>%
select(
cells,
log_num_otus,
num_otus = richness,
avg_pi,
sqrt_pi,
sd_pi,
var_pi,
hill_1 = hill_1_c,
hill_2 = hill_2_c,
hill_3 = hill_3_c,
hill_4 = hill_4_c,
hill_5 = hill_5_c
)
sumstats_200 <- read_csv(file.path(spread_path, "sumstats_200.csv")) %>%
mutate(log_num_otus = log10(richness),
sqrt_pi = sqrt(avg_pi)) %>%
select(
cells,
log_num_otus,
num_otus = richness,
avg_pi,
sqrt_pi,
sd_pi,
var_pi,
hill_1 = hill_1_c,
hill_2 = hill_2_c,
hill_3 = hill_3_c,
hill_4 = hill_4_c,
hill_5 = hill_5_c
)
sumstats_300 <- read_csv(file.path(spread_path, "sumstats_300.csv")) %>%
mutate(log_num_otus = log10(richness),
sqrt_pi = sqrt(avg_pi)) %>%
select(
cells,
log_num_otus,
num_otus = richness,
avg_pi,
sqrt_pi,
sd_pi,
var_pi,
hill_1 = hill_1_c,
hill_2 = hill_2_c,
hill_3 = hill_3_c,
hill_4 = hill_4_c,
hill_5 = hill_5_c
)
template_100 <-
stack(here("data", "climate", "rasters_100km", "chelsa_100km.tif"))
template_200 <-
stack(here("data", "climate", "rasters_200km", "chelsa_200km.tif"))
template_300 <-
stack(here("data", "climate", "rasters_300km", "chelsa_300km.tif"))
world_basemap <-
ne_coastline(scale = "small", returnclass = "sf") %>%
st_transform(crs(template_100)) %>%
st_simplify()
pal <- wes_palette("Zissou1", 100, type = "continuous")
sumstats <- colnames(sumstats_100 %>%
select(-cells)) %>%
set_names()
resolutions <- c(100, 200, 300)
sumstat_poly <- vector(mode = "list", length = 3)
names(sumstat_poly) <- c("res_100", "res_200", "res_300")
for (res in seq_along(resolutions)) {
map(sumstats, ~write_legends(.x, resolution = resolutions[res]))
sumstat_poly[[res]] <- create_poly(resolutions[res])
}
shinyApp(
ui = fluidPage(
fluidRow(
column(3,
selectInput("resolution", "Spatial Resolution",
choices = resolutions)
),
column(3,
selectInput("sumstat", "Summary Statistic",
choices = sumstats)
),
column(3,
selectInput("explanatory", "Explanatory Variable",
choices = explanatory_vars)
)
),
fluidRow(
column(plotlyOutput("sumstat_plot", inline = TRUE), width = 10)
),
fluidRow(
column(plotOutput("scatterplot"), width = 7),
column(gt_output("lm_table"), width = 4)
)
),
server = function(input, output) {
ss_poly <- reactive(df <-
sumstat_poly[[paste0("res_", input$resolution)]])
ss_lm <- reactive({
lm(reformulate(input$sumstat, input$explanatory), data = ss_poly())
})
basemap <- reactive({
ggplot() +
geom_sf(data = world_basemap,
fill = "transparent",
show.legend = FALSE)
})
output$sumstat_plot <- renderPlotly({
ggplotly(
basemap() +
geom_sf(
data = ss_poly(),
aes_string(fill = input$sumstat),
size = 0.1
) +
scale_fill_gradientn(colors = pal, guide = NULL) +
labs(title = paste0("Map of ", input$sumstat)) +
ggthemes::theme_map()
) %>%
layout(
images = list(
source = base64enc::dataURI(file = here(
"output", "legends", paste0(input$sumstat, "_100", ".png")
)),
x = 0,
y = 0,
sizex = 0.75,
sizey = 0.75,
xref = "paper",
yref = "paper",
xanchor = "left",
yanchor = "bottom"
),
margin = list(t = 50)
)
})
output$scatterplot <- renderPlot({
ggplot(data = ss_poly(), aes_string(x = input$explanatory, y = input$sumstat)) +
geom_point() +
geom_smooth(method = "lm") +
theme_minimal()
})
output$lm_table <- render_gt({
lm_tidy <- ss_lm() %>%
tidy() %>%
slice(-1) %>%
select(estimate, p.value)
lm_glance <- ss_lm() %>%
glance() %>%
select(r.squared)
bind_cols(lm_tidy, lm_glance) %>%
gt() %>%
fmt_number(everything(), decimals = 3)
})
},
options = list(height = 700)
)
?reformulate
reformulate("s", "d")
shinyApp(
ui = fluidPage(
fluidRow(
column(3,
selectInput("resolution", "Spatial Resolution",
choices = resolutions)
),
column(3,
selectInput("sumstat", "Summary Statistic",
choices = sumstats)
),
column(3,
selectInput("explanatory", "Explanatory Variable",
choices = explanatory_vars)
)
),
fluidRow(
column(plotlyOutput("sumstat_plot", inline = TRUE), width = 10)
),
fluidRow(
column(plotOutput("scatterplot"), width = 7),
column(gt_output("lm_table"), width = 4)
)
),
server = function(input, output) {
ss_poly <- reactive(df <-
sumstat_poly[[paste0("res_", input$resolution)]])
ss_lm <- reactive({
lm(reformulate(input$explanatory, input$sumstat), data = ss_poly())
})
basemap <- reactive({
ggplot() +
geom_sf(data = world_basemap,
fill = "transparent",
show.legend = FALSE)
})
output$sumstat_plot <- renderPlotly({
ggplotly(
basemap() +
geom_sf(
data = ss_poly(),
aes_string(fill = input$sumstat),
size = 0.1
) +
scale_fill_gradientn(colors = pal, guide = NULL) +
labs(title = paste0("Map of ", input$sumstat)) +
ggthemes::theme_map()
) %>%
layout(
images = list(
source = base64enc::dataURI(file = here(
"output", "legends", paste0(input$sumstat, "_100", ".png")
)),
x = 0,
y = 0,
sizex = 0.75,
sizey = 0.75,
xref = "paper",
yref = "paper",
xanchor = "left",
yanchor = "bottom"
),
margin = list(t = 50)
)
})
output$scatterplot <- renderPlot({
ggplot(data = ss_poly(), aes_string(x = input$explanatory, y = input$sumstat)) +
geom_point() +
geom_smooth(method = "lm") +
theme_minimal()
})
output$lm_table <- render_gt({
lm_tidy <- ss_lm() %>%
tidy() %>%
slice(-1) %>%
select(estimate, p.value)
lm_glance <- ss_lm() %>%
glance() %>%
select(r.squared)
bind_cols(lm_tidy, lm_glance) %>%
gt() %>%
fmt_number(everything(), decimals = 3)
})
},
options = list(height = 700)
)
?raster::resample
